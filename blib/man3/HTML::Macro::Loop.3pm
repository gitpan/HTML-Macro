.\" Automatically generated by Pod::Man version 1.02
.\" Tue Dec 18 15:43:23 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` `
.    ds C' '
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
.    .
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "Loop 3"
.TH Loop 3 "perl v5.6.0" "2001-07-05" "User Contributed Perl Documentation"
.UC
.SH "NAME"
\&\s-1HTML:\s0:Macro::Loop \- looping construct for repeated \s-1HTML\s0 blocks
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 7
\&  use HTML::Macro;
\&  use HTML::Macro::Loop;
\&  $ifp = HTML::Macro->new();
\&  $loop = $ifp->new_loop('loop-body', 'id', 'name', 'phone');
\&  $loop->push_array (1, 'mike', '222-2389');
\&  $loop->push_hash ({ 'id' => 2, 'name' => 'lou', 'phone' => '111-2389'});
\&  $ifp->print ('test.html');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Vb 1
\&  HTML::Macro::Loop processes tags like
.Ve
<loop id=\*(L"loop-tag\*(R"> loop body </loop>
.PP
.Vb 3
\&    Each loop body is treated as a nested HTML::Macro within which variable
\&substitutions, conditions and nested loops are processed as described under
\&HTML::Macro.
.Ve
.Vb 7
\&    Each call to push_array and push_hash inserts a new loop iteration.
\&When the loop is evaluated these iterations are used (in the order they
\&were inserted) to create HTML::Macros that are applied to the loop body.
\&push_hash is analogous to HTML::Macro::set_hash; it sets up multiple variable
\&substitutions.  push_array must be used in conjunction with declare.
\&declare provides the list of keys that are implicitly associated with the
\&values in the corresponding positions in the argument list of push_array.
.Ve
.Vb 3
\&    An HTML::Macro::Loop object is associated with a loop tag by setting it to
\&the value of the loop tag in an HTML::Macro.  This has the effect that the
\&name spaces of page variables and loop tags overlap.
.Ve
For example:
.PP
.Vb 1
\&    $ifp->set ('loop-tag', $loop);
.Ve
Ordinarily, however, loops are created using the \s-1HTML:\s0:Macro::new_loop
function.  This first argument to new_loop is the loop tag; all subsequent
arguments are loop keys.  
.PP
Each iteration of the loop, created by calling push_arry or push_hash, sets
a value for each of the declared loop keys.  If keys are not declared
explicitly using new_loop, they may be declared implicitly by the first
call to push_hash.  The number of elements in the arrays passed to
push_array must match the number of declared loop keys.
.PP
\&\s-1HTML:\s0:Macro::Loop::pushall_arrays is a shortcut that allows a number of loop
iterations to be pushed at once.  It is typically used in conjunction with
\&\s-1DBI:\s0:selectall_arrayref.
.PP
Variable substitution within a loop follows the rule that loop keys take
precedence over \*(L"global\*(R" variables set by the enclosing page (or any outer
\&\fIloop\fR\|(s)).
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael Sokolov, sokolov@ifactory.com
.SH "SEE ALSO HTML::Macro"
.IX Header "SEE ALSO HTML::Macro"
\&\fIperl\fR\|(1).
